"""
Предположим, нам требуется найти 4 последовательных числа, причем сами числа мы не знаем.
В данном случае паттерн нам потребуется составить согласно определенному синтаксису регулярных выражений.
"""

import re

sentence = '1357 hello world!'

r = re.match('\d+', sentence)
print(r.group(0))


"""
В примере выше, так как мы не знаем, что за число у нас должно быть мы используем в качестве шаблона \d+, 
что означает любое число(\d), 1 или более раз друг за другом. 
"""
"""
Очень часто мы можем встретить запись шаблона с указанием сырой строки(необработанной строки). 
Для этого перед строкой указывается r(raw).
"""

b = re.match(r'\d+', sentence)
print(b.group(0))


# Необработанные строки используются для того, чтобы знак \ не экранировал символы( \n ,\t и т.д) Если в строке есть \,
# который нужен сам по себе, то его нужно дополнительно экранировать самим \.
# Пример:
# "C:\\Users\\Admin"
# Для raw-строк текст станет более человеко-читаемый:
# r"C:\Users\Admin"
