Вслед за созданием таблиц выполняются инструкции вставки,
c помощью которых создается пробный проект и относящиеся к нему задачи.

SQLite для Python предлагает меньше типов данных, чем есть в других реализациях SQL.
С одной стороны, это накладывает ограничения, но, с другой стороны, в SQLite многое сделано проще. Вот основные типы:

NULL — значение NULL
INTEGER — целое число
REAL — число с плавающей точкой
TEXT — текст
BLOB — бинарное представление крупных объектов, хранящееся в точности с тем, как его ввели

Разберем создание базы данных и таблицы подробнее. Есть несколько способов создания базы данных в Python с помощью SQLite.
Для этого используется объект Connection, который и представляет собой базу. Он создается с помощью функции connect().

Создадим файл .db, поскольку это стандартный способ управления базой SQLite.
Файл будет называться test.db. За соединение будет отвечать переменная conn.

conn = sqlite3.connect('test.db')

Эта строка создает объект connection, а также новый файл orders.db в рабочей директории.
Если нужно использовать другую, ее нужно обозначить явно:

conn = sqlite3.connect('ПУТЬ-К-ПАПКИ/test.db')


Если файл уже существует, то функция connect осуществит подключение к нему.
Функция connect создает соединение с базой данных SQLite и возвращает объект, представляющий ее.

Еще один способ создания баз данных с помощью SQLite в Python — создание их в памяти.
Это отличный вариант для тестирования, ведь такие базы существуют только в оперативной памяти.

conn = sqlite3.connect(:memory:)


После создания объекта соединения с базой данных нужно создать объект cursor.
Он позволяет делать SQL-запросы к базе. Используем переменную cur для хранения объекта:

cur = conn.cursor()

Теперь выполнять запросы можно следующим образом:
cur.execute("ВАШ-SQL-ЗАПРОС-ЗДЕСЬ;")


Обратите внимание на то, что сами запросы должны быть помещены в кавычки — это важно.
Это могут быть одинарные, двойные или тройные кавычки.
Последние используются в случае особенно длинных запросов, которые часто пишутся на нескольких строках.

Давайте разберем как создать таблицу, в которой у нас есть имя фамилия пол, ну и порядковый номер.
Для этого необходимо создать запрос

cur.execute("""CREATE TABLE IF NOT EXISTS users(
   userid INT PRIMARY KEY,
   fname TEXT,
   lname TEXT,
   gender TEXT);
""")
conn.commit()

В коде выполняются следующие операции:
    1. Функция execute отвечает за SQL-запрос
    2. SQL генерирует таблицу users
    3. IF NOT EXISTS поможет при попытке повторного подключения к базе данных. Запрос проверит,
        существует ли таблица. Если да — проверит, ничего ли не поменялось.
    4. Создаем первые четыре колонки: userid, fname, lname и gender. Userid — это основной ключ.
    5. Сохраняем изменения с помощью функции commit для объекта соединения.

