При работе бота неизбежно возникновение различных ошибок, связанных не с кодом, а с внешними событиями.
Простейший пример: попытка отправить сообщение пользователю, заблокировавшему бота.
Чтобы не оборачивать каждый вызов в try..except, в aiogram существует специальный хэндлер для исключений, связанных с Bot API.
Рассмотрим следующий пример кода, имитирующий задержку перед ответом пользователю:
________________________________________________________________________________________________________________________
@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)
    await message.reply("Вы заблокированы")
________________________________________________________________________________________________________________________

За эти 10 секунд пользователь может успеть заблокировать бота со своей стороны и попытка вызвать метод reply
приведёт к появлению исключения BotBlocked. Напишем специальный хэндлер для этого исключения

________________________________________________________________________________________________________________________
from aiogram.utils.exceptions import BotBlocked

@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: объект события от Telegram. Exception: объект исключения
    # Здесь можно как-то обработать блокировку, например, удалить пользователя из БД
    print(f"Меня заблокировал пользователь!\nСообщение: {update}\nОшибка: {exception}")

    # Такой хэндлер должен всегда возвращать True,
    # если дальнейшая обработка не требуется.
    return True
________________________________________________________________________________________________________________________

Аналогично пишутся обработчики и на другие исключения. Таким образом,
если одна и та же непредвиденная ситуация может возникнуть в различных хэндлерах,
то можно вынести её обработку в отдельный хэндлер ошибок. Кода будет меньше, а оставшийся станет читабельнее.
________________________________________________________________________________________________________________________

Для того, чтобы сделать код чище и читабельнее, aiogram расширяет возможности стандартных объектов Telegram.
Например, вместо bot.send_message(...) можно написать message.answer(...) или message.reply(...).
В последних двух случаях не нужно подставлять chat_id, подразумевается, что он такой же, как и в исходном сообщении.
Разница между answer и reply простая: первый метод просто отправляет сообщение в тот же чат, второй делает "ответ" на сообщение из message:

@dp.message_handler(commands="answer")
async def cmd_answer(message: types.Message):
    await message.answer("Это простой ответ")


@dp.message_handler(commands="reply")
async def cmd_reply(message: types.Message):
    await message.reply('Это ответ с "ответом"')
________________________________________________________________________________________________________________________



