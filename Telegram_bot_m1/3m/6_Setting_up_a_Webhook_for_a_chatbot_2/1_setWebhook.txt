setWebhook - Используйте этот метод, чтобы указать URL-адрес и получать входящие обновления через исходящий webhook.
Всякий раз, когда появляется обновление для бота, мы отправляем запрос HTTPS POST на указанный URL-адрес,
содержащий сериализованный в JSON файл aiogram.types.update.Update.
В случае неудачного запроса мы откажемся от него после разумного количества попыток.
Возвращает значение True при успешном выполнении. Если вы хотите убедиться, что запрос Webhook поступает из Telegram,
мы рекомендуем использовать секретный путь в URL-адресе, например https://www.example.com /<токен>.
Поскольку никто другой не знает токен вашего бота, вы можете быть уверены, что это мы.

url - URL-адрес HTTPS для отправки обновлений. Используйте пустую строку для удаления интеграции с webhook

certificate - Загрузите свой сертификат открытого ключа, чтобы можно было проверить используемый корневой сертификат.

ip_address - Фиксированный IP-адрес, который будет использоваться для отправки запросов webhook вместо IP-адреса,
разрешенного через DNS

max_connections - Максимально допустимое количество одновременных HTTPS-подключений к webhook для доставки обновлений - 1-100.
Значение по умолчанию равно 40. Используйте более низкие значения, чтобы ограничить нагрузку на сервер вашего бота,
и более высокие значения, чтобы увеличить пропускную способность вашего бота.

allowed_updates - Сериализованный в формате JSON список типов обновлений, которые вы хотите, чтобы ваш бот получал.
Например, укажите [„сообщение“, „edited_channel_post“, „callback_query“], чтобы получать обновления только этих типов.
Укажите пустой список для получения всех типов обновлений, кроме chat_member (по умолчанию). Если не указано,
будет использоваться предыдущая настройка.

drop_pending_updates - Передайте значение True, чтобы удалить все ожидающие обновления

Давайте напишем небольшого бота, с учетом тех знаний которые мы получили и попробуем его реализовать с помощью webhook-ов.
В данном случае у нас нет подходящего сервера для выгрузки нашего бота, поэтому мы сделаем это на локальном компьютере,
но с использованием вебхуков.


Так как при работе с вебхуками нам потребуется определенный адрес в сети, на который будут идти уведомления о сообщениях,
нам потребуется сторонняя утилита ngrok.

